generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
 
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String                   @id @default(cuid())
  name           String?
  email          String                   @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  role           UserRole                 @default(USER)
  subscription   SubscriptionPlan         @default(FREE)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  trialStartDate DateTime?
  accounts       Account[]
  sessions       Session[]
  expenses       Expense[]
  farms          Farm[]
  demands        MarketplaceDemand[]
  negotiations   MarketplaceNegotiation[]
  offers         MarketplaceOffer[]
  notifications  Notification[]
  payments       Payment[]
  teamMembers    TeamMember[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Farm {
  id           String    @id @default(cuid())
  name         String
  location     String
  totalArea    Float
  crop         String?
  plantingDate DateTime?
  harvestDate  DateTime?
  notes        String?
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plots        Plot[]

  @@map("farms")
}

model Plot {
  id          String     @id @default(cuid())
  name        String
  area        Float
  cropType    String
  plantedDate DateTime?
  harvestDate DateTime?
  status      PlotStatus @default(PREPARATION)
  farmId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  expenses    Expense[]
  farm        Farm       @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@map("plots")
}

model Expense {
  id          String          @id @default(cuid())
  description String
  amount      Float
  category    ExpenseCategory
  date        DateTime
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  plotId      String?
  type        TransactionType @default(EXPENSE)
  plot        Plot?           @relation(fields: [plotId], references: [id])
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model TeamMember {
  id        String   @id @default(cuid())
  name      String
  role      String
  salary    Float
  phone     String?
  email     String?
  hireDate  DateTime
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("team_members")
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus   @default(PENDING)
  priority     TaskPriority @default(MEDIUM)
  dueDate      DateTime?
  teamMemberId String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  teamMember   TeamMember   @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model MarketplaceOffer {
  id           String                   @id @default(cuid())
  title        String
  description  String
  category     MarketplaceCategory
  price        Float
  quantity     Float
  unit         String
  location     String
  status       MarketplaceStatus        @default(ACTIVE)
  userId       String
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  latitude     Float?
  longitude    Float?
  negotiations MarketplaceNegotiation[]
  user         User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("marketplace_offers")
}

model MarketplaceDemand {
  id           String                   @id @default(cuid())
  title        String
  description  String
  category     MarketplaceCategory
  maxPrice     Float
  quantity     Float
  unit         String
  location     String
  status       MarketplaceStatus        @default(ACTIVE)
  userId       String
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  latitude     Float?
  longitude    Float?
  user         User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  negotiations MarketplaceNegotiation[]

  @@map("marketplace_demands")
}

model MarketplaceNegotiation {
  id        String             @id @default(cuid())
  offerId   String?
  demandId  String?
  price     Float
  quantity  Float
  message   String?
  status    NegotiationStatus  @default(PENDING)
  userId    String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  demand    MarketplaceDemand? @relation(fields: [demandId], references: [id], onDelete: Cascade)
  offer     MarketplaceOffer?  @relation(fields: [offerId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("marketplace_negotiations")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  data      Json?
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Payment {
  id                    String        @id @default(cuid())
  userId                String
  planId                String
  amount                Float
  currency              String        @default("XOF")
  paymentMethod         String        @default("ORANGE_MONEY")
  status                PaymentStatus @default(PENDING)
  orangeMoneyNumber     String?
  qrCode                String?
  expiresAt             DateTime
  confirmedAt           DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  userOrangeMoneyNumber String?
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum UserRole {
  USER
  ADMIN
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  BUSINESS
  ENTERPRISE
}

enum PlotStatus {
  PREPARATION
  PLANTED
  GROWING
  HARVESTED
  FALLOW
}

enum ExpenseCategory {
  SEEDS
  FERTILIZER
  EQUIPMENT
  LABOR
  FUEL
  MAINTENANCE
  OTHER
}

enum TransactionType {
  EXPENSE
  REVENUE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MarketplaceCategory {
  CROPS
  SEEDS
  FERTILIZER
  EQUIPMENT
  LIVESTOCK
  SERVICES
  OTHER
}

enum MarketplaceStatus {
  ACTIVE
  SOLD
  CANCELLED
  EXPIRED
}

enum NegotiationStatus {
  PENDING
  ACCEPTED
  REJECTED
  COUNTER_OFFER
  COMPLETED
}

enum NotificationType {
  NEGOTIATION_MESSAGE
  NEGOTIATION_UPDATE
  OFFER_INTEREST
  DEMAND_MATCH
  SYSTEM
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  REJECTED
  EXPIRED
}
